Sass

     - Syntactically Awesome StyleSheets
     - It is a CSS PreProcessor/Extension
     - Sass files (.scss) files are compiled down to regular CSS
    

    Variables in CSS 
        - prefixed with a '$' 
            ex. $primary-color: blue
    
    Nesting
        - instead of styling children using the same parent selector over and over again, you can simply nest the children
            ex. 
                nav {
                    color: red;
                    a {
                        color: blue
                    }
                    p {
                        color: green
                    }
                }
    
    Modules 
        - you can separate your scss files, allowing for styling individual components if needed 
        - start the class with "_name.scss"
            - this makes it so the scss file will not compile on its own and can be imported into another scss file
            - to do the import, "use @use 'name';"
    
    Mixins
        - these are basically chunks of CSS that can be modified based on an input
        - think of a function, but more about the block of code it provides
        - you substitute in a mixin at a particular location, rather than calling a function 
    
    Function
        - actually returns something to use, rather than swap out for a css block like a mixin
    
    Inheritance 
        - you can extend a given piece of scss using the @extend directive
            ex. 
                %box {
                    border: 1px solid black;
                }

                .message {
                    @extend %box;
                    color: red; 
                }
    
    Conditionals
        - can use @if and @else to have conditional statments within our scss
        - very useful and more programmatic 

    
    - if you have classes with the same base name, that are nested, you can use '&' syntax 
        ex. <div class="box"> <p class="box-paragraph"> Howdy </p> </div>

            .box {
                margin: 0;
                &-paragraph {
                    color: red; 
                }
            }

    Lighten & Darken
        - basically you can lighten or darken a given color using the lighten and darken functions
        ex. background-color: lighten(red, 10%);
            color: darken(blue, 10%);

    Partials 
        - seperate files used to hold segments of CSS 
        - good way to keep similar code seperate
        - names for partials start with an underscore
        - use the @import directive to import the partial file


    
    EXAMPLES

    Variables
        $color-primary: red;

    Mixin
        @mixin mixin-name($p1, $p2) {
            background-color: $p1;
            color: $p2;
        }   

        usage: @include mixin-name(red, blue);

    Looping
        for directive
            @for $i in 1 through 10 {
                .class-#{$i} {
                    width: 10px * $i;
                }
            }

            through vs. to
                - 1 through 3   => 1,2,3
                - 1 to 3        => 1,2


        each directive 
            @each $color in red,black,blue {
                .bg-#{$color} {
                    background-color: $color;
                }
            }

            can also loop through a var list

        while directive
            $x: 1;
            @while $x < 6 {
                .text-#{$x} {
                    font-size: 15px * $x;
                }
                $x: $x + 1;
            }   
    
    Extending
        .class1 {
            height: 10px;
        }
        .class2 {
            @extend .class1;
            width: 10px;
        }


    IMPORTANT NOTES ABOUT NEW SCSS 

        - Do not use @import anymore, it is not going to be supported
            - why?
                - pollutes the global namespace
                - gives access to any previously imported files to newly imported ones
                - just clunky
        - Use @use instead
            - the syntax is nearly identical
            - the big difference is, now the scss file your are "using" is a namespace
            - so you import a file
                ex.
                    @use "./file"

                - now we do, file.$name or file.$color
                - it is a namespace
        
        - @forward allows for you to export uses as if they were all a part of a single file
            - needs to be done in an index file of a directory
            - ex. 
                _index.scss

                @forward "./file"
                