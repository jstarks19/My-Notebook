
MongoDB

    - General purpose, document-based, distributed database built for modern application developers and for the cloud era
    - Why use Mongo?
        - well.. it is very commonly used with Node and Express (MEAN & MERN)
        - it's easy to get started with, though can be quite tricky to master
        - it plays quite well with javascript
        - its popularity means there is a strong community for mongo, meaning you get your questions answered and your bugs squashed 
    
    Mongo Shell
        - mongo                                     : start shell
        - use <db name>                             : use database
        - show dbs                                  : list databases
        - db                                        : show our current in-use db 
        - use <db name> + <db name>.dropDatabase()  : drop a database 
        - show collections                          : that
        - use <collection>                          : that
        - db.<collection name>.drop()               : deletes collection 
        
        C
        Insertion
            - db.insertOne();
            - db.insert();
            - db.insertMany();
        R
        Finding
            - db.collection.find()                  : returns everything in the collection 
            - db.collection.find({name: 'jason'})   : returns every document where name = jason 
                - find returns a cursor to the data returned
                    - a cursor is like a pointer to the data
        U
        Updating
            - db.collection.updateOne({name : "jason"}, {$set: {age:4, bord:1998}})
            - db.collection.updateMany({age : "22"}, {$set {name: "Jason"}}) 
            - db.collection.updateOne(
                {name: "jason"},
                {
                    $set: {age:10},
                    $currentDate: {lastChanged: true}
                }
            )

        D
        Delete 
            - db.collection.deleteOne({name: 'jason'});


        Additional Mongo
            - other operators
                $gt, $gte, $lt, $lte, $ne
                $in, $nin ex. db.collection.find({name: {$in ['nic','jason']]}})




    BSON
        - Basically mongos version of JSON
        - Why don't they just use JSON?
            - JSON is inherentely slow because it is text based
            - BSON is binary JSON, more compact version of JSON


    Relationships
        
        - one-to-few
            - only have a couple things associated with the one 
            - store the few associated properties/objects directly in the one's document 
        - one-to-many
            - have a relatively decent sized number of associated documents
            - store the many Object ID's somewhere in the one's document
        - one-to-bajillions (alot)
            - it's more efficient to store a reference to the parent on the child document
        - use populate in order to fill in object IDs

    
    Rules of Thumb for Modeling Relationships (from Mongo team themselves)
        1) Favor embedding unless there is a compelling reason not to
        2) needing to access an object on its own is a compelling reason not to embed it 
        3) arrays should not grow without bound
            - if there are more than a hundred many documents, don't embed them
            - if there are more than a thousand, don't store a reference to them, store a reference in the child
    
