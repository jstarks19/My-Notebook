Design Patterns

    - Very good book for design patterns
        - Design Patterns : Elements of Reusable Object-Oriented Software

    Biggest Point: you need to make sure you use these in the right way and at the right time

    5 Common Patterns
        1) Singleton Pattern
            ex. 
                - A single database driver
                - A list of config settings
                - Current state of an app
                
            Pro: Get the data at any point. Know exactly where it is and how to access it.
            Con: Jump on the singleton bandwagon too early. 
                - If you commit to the singleton pattern too early, it becomes a nightmare to refactor into anything else 
        2) Facade Pattern
            - reflected in real life, a facade is the front face of the building which hides the mechanical and physical interworkings of that system 
            ex.
                - A compiler
                    - there is a ton behind the compiler, but it isn't revealed to the user
                    - they simply compile their code, we hide the internals
            Pro: Simplified to the user, makes the process simple without overcomplicating the usage
            Con: Too simple that it is not useful/usable, Over verticalization (so specific to a particular use case it is not useful at all)
        3) Bridge Pattern
            - basically creating an adapter to a particular interface
            - think database driver, mongo adapter
            Pro: It allows for the single interface to be used by a wide variety of users, provided a wide variety of bridges exist
            Con: Overusing the pattern. If an interface has 10 different adapter points, well they you get 10 different groups making 10 different bridges for 10 different adapter points. It alters the usability of your interface, because there is so much modification that can occur and needs to occur. It's not simple anymore. 
        4) Strategy Pattern
            - essentially this pattern is about dividing complex tasks into simpler strategies
            - implement these strategies as seperate tasks and integrate them 
            - good for breaking down complex problems 
            - always make sure you have decent default strategies
        5) Observer Pattern
            - PUBSUB
            - loose coupling between publishers and subscribers 
            Con: You can get into event loops and nasty communication issues
                - to fix: don't use the same message bus for everything
                - keep simple, if a button fires an event, have that be all it does