Using HTTP in React 


    - Very common in application to need to fetch data at some point during user interaction
    - Since on the surface, react is a library built around building user interfaces
        - how exactly would we make AJAX requests/API Calls?
    
    - To be honest, react does not have a very particular way of sending or receiving data from a server
        - React is all about rending the props and state in an application
            - so, if you can get your request data in props or state somehow, you can render it 
        - So what do we do?
            - whatever we want!
            - we can use the Fetch API, or Axios, or any valid HTTP library 
    

    - Let's work with Axios here
        
        Install
            $ npm i axios

        GET Requests
        
            - In general, you are going to want to fetch your data within the ComponentDidMount() method 
            - here we do
            
                axios.get('https://api-endpoint')
                    .then(response => {
                        this.setState({posts: response.data})
                    })
                    .catch(error => {
                        console.log(error.name, error.message);
                    })
        
        POST Requests
            
            - In general, you should create some sort of controlled component, whether you are controlling a form or input field
            - On submit, you call
                e.preventDefault() // prevents page refresh

                axios
                    .post('https://api-post-endpoint', {obj to post})
                    .then(response => {
                        console.log(response)
                        // do what you'd like with the response
                    })
                    .catch(error => {
                        console.log(error)
                    })
        

        Might want to look at
            - redux axios
            - formik library for forms in react