React Components

    - the main building blocks of react 
    - "Components let you split the UI into independent, reusable pieces, and think about each piece in isolation"
    - combine UI and view logic
    - they are classes that know how to render themselves into HTML
    - the main idea is to compose entire functional components from smaller self contained components

    
    Setting up a Server 
        - use vscode liveserver
    
    Writing a component
        - if not using 'create react app'
            - we have to manually include script tags for react and react dom CDN
            - also have to include babel
                - allows us to use JSX in javascript
            - include a final script tag with our component reference
                ex. <script src="index.js" type="text/jsx></script>

        - two main ways of writing a component
            1) Class
                - the "traditional" React component
                - write logic in a JS Class
                - must include a 'render' method 
            2) Function
                - Historically used for dumb or simpler components 
                - Write logic in a JS Function
                - No render method needed, just return content 
            
            What is the difference?
                - Both can accept props and render content
                - Historically, function components couldn't use important features like
                    - State
                    - Lifecycle Methods 
                - With the introduction of Hooks, we can now write full-featured function components!!

        
        - every react component class we create needs to extend React.Component  

        ex. 
            class Hello extends React.Component {
                render() {
                    return <h1>Hello, World!</h1>;
                }
            }

            ReactDOM.render(<Hello />, document.getElementById('container-name'));
        
        - note, we can only return a single element
            - that said, we can certainly enclose other elements within a single element
            - but in the end, we should only be returning a single enclosed element 