React JS

    - Developed by and sponsored by Facebook
    - refers to itself as a library

    - what is react's selling point?
        - components!
        - these are modular pieces of reusable code that encapsulate the logic and HTML into a single class
        - make it very easy to build modular applications
    
    - what is different about components?
        - unlike the standard big three (HTML, CSS, yadda yadda)
            - react's components often incorporate all three of these in a single 'component'
    
    Library vs. Framework
        - a framework for web dev is characterized by
            - Larger JS Libraries
            - Provide "blueprint" for apps 
            - "Opinionated"
                - "This is how you should design a JS app"
            - often provide a templating system 
    
    Popular Frameworks
        - Angular
        - Vue
        - React?
            - I would consider React to be a Library on its own
                - it is good at creating components
                - aside from this, it is relatively unopinionated
            - However, very few people just use plain old react
            - Usually it is combined with other tools such as React Router, Webpack, Redux, etc.
            - The standard "React Ecosystem" with all of the mixins would be considered a Framework
            - Next.js is actually a framework built around React 
    
    Why would you want to use it?
        - Structure the 'view' layer of your application 
        - Provides reusable components with their own state
        - JSX - Dynamic Markup
        - Interactive UIs w/ Virtual DOM
        - Performance & Testing
        - Very very popular in the industry right now
    
    What Problem does React Solve?
        - In vanillaJS, there are two primary ways of manipulating the DOM/generating UIs
            1) manage state using the dom itself
                - basically all of your data is kept as part of the dom itself
                - if you want to add something, you make a new element and append it to the DOM
                - if you remove something, simply remove it from the dom
                    - the issue here is that all of our UI is disconnected
                    - some of it is handled in JS, some of it is handled in HTML, on every call we have to process and create DOM elements
            2) using only JS to render our content
                - basically, anytime something is added or removed, etc. we rerender the content on our page
                - this way, all of our rendering info is in a single JS file, and not spread amongst our project
                    - the issue with this is we would be repainting the DOM everytime we update ANYTHING, not good
                        - DOM operations are expensive, and will slow our app significantly if we rerender everything all the time

        - React aims to solve all of these issues and take advantage of all of their benefits
            - combines blazing fast page updates & UI centralization
            - now React is not the only tool that solves this problem elegantly
                - Vue and Angluar also do this
                - React is just the simplest and most unopinionated version of them
            - it lets us keep our data outside of the DOM and rerender the single elements that change
    