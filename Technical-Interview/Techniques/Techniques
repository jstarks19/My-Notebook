General
    - come up with a brute force solution regardless
    - think of a simpler version of the problem 
    - think using simpler examples => try to notice a pattern 
    - use a bigger example to gain insight 


Arrays
    - Sorting the input array
    - Using pointers, sometimes more than one
    - Using the properties of a sorted array to do work for you 
        - think smallest difference
            - you use the fact that it is sorted to decrease the difference of elements at pointers by determining the next pointer movement
        - think smallest amount of change that can't be made
            - you use the fact that you can make n change for each n, so if the next number is > n+1, you immediately are able to say you cannot make n + 1 change 
    - CONSIDER multiple loops
        - using 2 loops one after another is O(N), not O(n^2)        
            - or 100 loops, it's okay
        - very useful for dynamic programming / caching values



Dynamic Programming
    - 5 steps
        1) Visualize Examples
        2) Find an appropriate subproblem
        3) Find relationships among subproblems 
        4) Generalize the relationship you found 
        5) Implement by solving the subproblems in order
    - Common types of subproblems
        - given a sequence of length N (sorted)
            - subproblem is finding an ordered subsequence of length i 
        - given a sequence of length N (unsorted)
            - subproblem is finding an ordered subsequence of length i AFTER sorting N
        - given two sequences of length N and M
            - subproblem involves finding subsequences of length i and j from each of these 
        - given a sequence of length N 
            - subproblem involves working from the middle of the sequence outwards
        - given a 2D array as input
            - subproblem involves solving the problem on a smaller matrix
    - Memoization
        - top down approach
        - caching results as we find them  
        - working from our value downward (usually a recursive approach)
        - very common approach to brining down exponential recursive algrotihms
    - Tabulation
        - bottom up approach
        - start with the lowest value and work toward our target (usually an iterative approach)