Trees

    - One of the most prominent data structures in all of computer science and coding interviews
    - Usually this is the canonical 'Data Structure' for most people
    - Mathematical definition
        - very complicated
        - In the context of coding interviews
            - pretty easy
            - just manipulation of the tree 

    - A tree is a rooted graph
        - each node possesses a number of child nodes
        - structure is directed, edges usually point downward 
        - asyclic
        - each node can only have one parent 
        - cannot be disconnected 
        - so rooted, directed, asyclic, disconnected
    
    - some tree types
        - binary tree
        - ternary tree
        - k-ary trees
            - every tree has at most k child nodes 
        - binary search tree
            - every node also satisfies the bst properties
        - heaps
            - min/max heaps
            - every node satisfies the heap property
        - tries
            - a tree like data structure
            - stores characters of strings
        - some trees have nodes point to their parents
        


    complexity

        - a tree is considered balanced if it maintains a log(N) complexity during traversal


        storing a tree
            - N is for # of Nodes
            SPACE: O(N)

        traversing a tree
            - all nodes 
                TIME: O(N)

            - half of the nodes (BST going down branches)
                TIME: O(Log(N))
                    - cuts the search space in half 
                    - in a balanced tree only 

        NOTE
            - during an interview
            - ensure that the tree is balanced, otherwise do not assume it has a log(N) complexity for traversal


    Terminology
        Terms
        - Branch        : any path starting from the top of the tree and ending at a bottom Node 
        - Leaf          : The bottom most child nodes in a tree 
        - Level         : The "rows" of a tree, level of parents, depth 
        - Depth/Height  : # of levels in a tree  
         
        Types
        - Complete      : Fully filled tree top to bottom, left to right, doesn't need all children
        - Full          : Any child has either k Nodes or 0 Nodes
        - Perfect       : All of the leaf Nodes are on the same level 

    Traversals
        - Pre-Order     : Handle Current Node, Recurse Left, Recurse Right
        - In-Order      : Recurse Left, Handle Current Node, Recurse Right
        - Post-Order    : Recurse Left, Recurse Right, Handle Current Node

        Since a tree is an Asyclic Connected Graph we can do DFS & BFS 
        - Level-Order   : This is basically doing a BFS traversal on a Binary Tree
        