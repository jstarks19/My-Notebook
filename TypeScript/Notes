TypeScript Basics

    TypeScript is a Superset of JavaScript
        - the main advantage of TS is it can highlight errors or unsafe patterns in existing JS

    Inferring Types
        - In general, TypeScript will infer types when declared & initialized 
        - Cannot reassign a variable to a different type after it has been d&i

    What is the need for TypeScript?
        - there is a lot of ambiguity in JavaScript
        


















    Interfaces
        - You can describe the shape of an Object using TypeScript's Interfaces

        Interface

            interface User {
                name: string;
                age: number;
            }

        TS Object w/ Interface
        
            let user : User {
                name: "Jason",
                age: 22,
            }

        - You can also use this within classes, in order to more strictly enforce types  

        Class

            class User {
                name: string;
                age: number;

                constructor(name: string, age: number) {
                    this.name = name;
                    this.age = age;
                }
            }
    
    Types & Interfaces
        - There are two main ways to declare a "Type"
            1. the type literal
                type MyType = {
                    name: string;
                }

            2. interfaces
                interface MyInterface = {
                    name: string;
                }

        - One thing to note is, you can intermix type and interfaces
            - ex. you declare a var as a User type
                you then declare a new var as a User interface and set it equal to the first var

        - There are some subtle differences with how you work with either
            - you can extend both of them, though types are extended through intersection, while interfaces are extended with the 'extends' keyword

            ex. 

            type UserBoy = { running: true } & UserType;

            interface UserBoy extends UserType {
                running: true;
            }


        - In general, you should be using interfaces over types
            - this is because interfaces will provide a much better message for errors/warnings
        
        - One big difference 
            - intefaces are open & can be extended by redeclaring them
                - you cannot do this with types

            ex. 

                interface Dog {
                    toys: number;
                } 

                interface Dog {
                    name: string;
                }

    Composing Types
        - you can create more complex types in TypeScript by combining some simpler ones
            - two main ways of doing this: 
            
            1) Unions
                ex. type MyBool = true | false; 

                - can also build enums, as well as sets of numbers for types

                ex. 
                    type cardEnum = "heart" | "spade" | "club" | "diamond"
                    type numEnum = 1 | 3 | 5 | 7 | 9

                    // can also allow for multiple input types using the Union

                    function getLength(obj: string | string[]) {
                        return obj.length;
                    }

                    // might be useful to use the typeof operator to check the type of a given 
                    // input and deal with accordingly 


            2) Generics
                - can declare generics using the angle bracket syntax
                    interface Backpack<Type> {
                        add: (obj: Type) => void;
                        get: () => Type;
                    }

                    // declare a constant and don't worry about where it is coming from 
                    declare const backpack: Backpack<string>;

                    // the result is a stringm because we declared it above as a variable part of Backpack
                    const result = backpack.get();


    Structural Type System
        - One of TypeScript's big principles is that type checking focuses on the shape that values have
            - this is often referred to as "Structural" or "Duck" typing 
        - In a structural type system, if two objects have the same shape, they are considered to be of the same type
        - What this means is if you declare a function that accepts a certain type
            - as long as a subset of the object you pass in is of the same shape as that type, it will allow you to do so 
            - This is also the case for Classes 

        ex. 

            interface Point {
                x: number;
                y: number;
            }

            function logPoint(p: Point) {
                console.log(`${p.x}, ${p.y}`);
            }

            const pointNoType = { x: 12, y: 13};
            logPoint(pointNoType);
                // output: 12, 13


            const pointWSubset = { x: 12, y: 13, z: 14};
            logPoint(pointWSubset);
                // output: 12, 13





    