WebPack

    - In essence, WebPack is a module bundler
        - it takes different dependencies, creates modules, and bundles the entire group up into manageable output files
    
    - It is especially useful in Single Page Applications (SPAs)
        - which is the current 'de facto' standard for Web Apps

    - In general, when adding script files to an HTML doc, order matters
        - if one file depends on another, the latter must come first
        - now scaling this up to a full blown application will result in a nightmare web of dependencies
        - WebPack helps us convert these dependencies into modules
            - which provide a tighter scope 
            - webpack can help manage our dependencies as well 
    
    - WebPack also offers bundling
        - where it will take all of our dependencies and bundle them into a single file
        - this allows for only a single file to be needed & downloaded
            - much faster and more reliable 
    
    - So, in general, WebPack provides two main services
        - Modularisation
        - Bundling

    Key Concepts to Know


        Creating a Config
            $ touch webpack.config.js

        Entry
            - the entry point for your application
            - where you want webpack to begin developing its dependency graph 
            
            defaults:
                location: ./src/index.js 
            
            example:
                entry: './src/index.js'

        Output
            - tells webpack where exactly to emit these bundles 
            - also tells webpack how to name the output files

            defaults:
                location: ./dist
                bundled filename: main.js    

            example:
                ^ const path = require('path') ^

                output: {
                    path: path.resolve(__dirname, './dist') 
                    filename: 'webpack.bundle.js'
                }

        Loaders
            - out of the box, WebPack only supports JSON and JavaScript files
            - loaders circumvent this by allowing webpack to process other types of files
                - & convert them into valid modules that can be added to the dependency graph
            - loaders in general have two properties
                - test => identifies which file(s) should be transformed (use regex here)
                - use  => idicates which loader should be used to do that transforming

            example:
                module: {
                    rules: [ 
                        {
                            test: /\.jsx?$/,
                            use: 'babel-loader',
                        },
                        {
                            test: /\.css$/,
                            use: [
                                { loader: 'style-loader'}, 
                                { loader: 'css-loader'},
                            ],
                        }
                    ],
                }

            Some Notable Loaders
                Raw (for text files)
                    name: raw-loader
                    cmd : $ npm i raw-loader

                Babel (for working with ES6+ imports & JSX)
                    name: babel-loader
                    cmd : $ npm i babel-loader 
                    note: will also likely need @babel/core @babel/preset-env @babel/preset-react

                Stylesheets (for injecting stylesheets into the app)
                    name: style-loader
                    cmd : $npm i style-loader
                    note: cannot use style-loader on its own (must use with a stylesheet loader)
                    
                CSS (for importing css files)
                    name: css-loader
                    cmd : $npm i css-loader

                SASS (for using the SASS preprocessor)
                    name: sass-loader
                    cmd : $npm i sass-loader
                    note: will also likely need to install sass 

        Plugins
            - a plugin offers a wider variety of functions compared to loaders
                - including but not limited to
                    - bundle optimization, asset management, and injection of environment variables 
            - in order to use a plugin you must require it at the top of your config file and add it to the plugins array
            - everytime a plugin is used within your config, you must call it with the new operator 
                - this is because you can use it multiple times in the same config 
            
            example:
                ^ const HTMLWebpackPlugin = require('html-webpack-plugin') ^

                plugins: [new HtmlWebpackPlugin({ template: './src/index.html' })]

                // this plugin injects your bundled modules into a dist html file 
        
        Mode 
            - the mode parameter is used to determine what mode this config is for (what optimizations will take place)
                modes: none, production, development
            
            example: 
                mode: 'production'
        
        



    Additional Options to Add to Config
        Watch 
            - we can also include a 'watch' key and set it's value to true to continuously 'watch' our changes and rebundle

        Dev Server
            $ npm i webpack-dev-server
            - new key in config called
                devServer: {
                    port: 8080,
                    contentBase: path.resolve(__dirname, 'dist')
                }
            - 'hot':true
                - will hotswap out the modified files in memory without refreshing our pages
                - need to include a line in the module
                    if (module.hot) { module.hot.accept() }
            - NOTE: devServer does not actually output the bundled file into our dist directory
                - it simply creates a file in memory for us to use 'live'
                - so while we don't get a bundled output, we get much faster live updates 

